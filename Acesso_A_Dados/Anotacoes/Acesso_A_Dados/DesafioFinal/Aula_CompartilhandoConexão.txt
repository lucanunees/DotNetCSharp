
=== Desafio Final ===
Aula Compartilhando a conexão.

	- Criamos uma classe nova com a conexão com o banco para não precisar passar em todas
as classes de Screen (tela). 

E a classe de DataBase criada na raiz fica assim:

using Microsoft.Data.SqlClient;

namespace Blog
{
    //Classe static sempre fica na memoria.
    public static class Database
    {
        public static SqlConnection Connection;
    }
}


Podemos alterar a program, chamando a classe:

class Program
{
    private const string CONNECTION_STRING = @"Server=localhost,1433;Database=Blog;User ID=sa;Password=Punto@2015;Trusted_Connection=False; TrustServerCertificate=True;";
    static void Main(string[] args)
    {     
        Database.Connection = new SqlConnection(CONNECTION_STRING);

        Database.Connection.Open();

        Load();

        Console.ReadKey();
        Database.Connection.Close();      
    }
}

Meu método que chama a list de tag fica desta forma:
using DesafioFinal.Models;
using DesafioFinal.Repositories;

namespace Blog.Screens.TagScreens
{
    public static class ListTagScreen
    {
        public static void Load()
        { 
            List();
        }

        private static void List()
        {
            var repository = new Repository<Tag>();

                 
        }
    }
}

E o repositorio fica com a conexão fixa lá e não preciso passar ao instanciar:

using Blog;
using Dapper.Contrib.Extensions;
using Microsoft.Data.SqlClient;

namespace DesafioFinal.Repositories
{
    public class Repository<TModel> where TModel : class
    {     
        public IEnumerable<TModel> GetAll()
        => Database.Connection.GetAll<TModel>();

        public TModel Get(int id)
        => Database.Connection.Get<TModel>(id);

        public void Create(TModel model)
        => Database.Connection.Insert<TModel>(model);

        public void Update(TModel model)
        {                 

        }

        public void Delete(TModel model)
        {

        }
        
        public void Delete(int id)
        {
            var model =Database.Connection.Get<TModel>(id);
            Database.Connection.Delete<TModel>(model);
        }
    }
}